[{"apiVersion":"influxdata.com/v2alpha1","kind":"Dashboard","metadata":{"name":"thirsty-greider-d89001"},"spec":{"charts":[{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"q6ubDE9Xbfmqju5iBXGzA","name":"Nineteen Eighty Four","type":"scale","hex":"#31C0F6"},{"id":"Whqeh-8o1VOjtLel10EdJ","name":"Nineteen Eighty Four","type":"scale","hex":"#A500A5"},{"id":"53gP2JB3xtrDZm6QIlhj8","name":"Nineteen Eighty Four","type":"scale","hex":"#FF7E27"}],"geom":"line","height":4,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Generated Noisy Stream","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"example_bucket\")\n  |> range(start: -15m)\n  |> filter(fn: (r) => r._measurement == \"heart_rate\")\n  |> filter(fn: (r) => r._field == \"noisy\" or r._field == \"original_time\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => exists r.noisy )\n  |> window(every: 10h) \n  |> map(fn: (r) => ({\n      _time: time(v: r.original_time),\n      noisy: r.noisy\n  }))"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":4,"widthRatio":1,"xCol":"_time","yCol":"noisy"},{"axes":[{"name":"x"},{"name":"y"}],"colors":[{"hex":"#31C0F6"},{"hex":"#BC00B8"},{"hex":"#FF7E27"}],"height":4,"kind":"Scatter","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Name this Cell","queries":[{"query":"from(bucket: \"example_bucket\")\n  |> range(start: -10m)\n  |> filter(fn: (r) => r._measurement == \"anomaly_data\")\n  |> filter(fn: (r) => r._field == \"noisy\" or r[\"_field\"] == \"anomaly\" or r._field == \"original_time\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => exists r.noisy)\n  |> map(fn: (r) => ({\n      _time: time(v: r.original_time),  // Adjust _time to be the original_time\n      noisy: r.noisy,\n      anomaly: r.anomaly\n  }))"}],"staticLegend":{},"width":4,"xCol":"_time","yCol":"noisy","yPos":4},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"-bjBJrn3M_w6K4cCx-oer","name":"Solid Green","type":"scale","hex":"#34BB55"},{"id":"6wSa_apgeTLuolkvB8KbQ","name":"Solid Green","type":"scale","hex":"#34BB55"},{"id":"BsgzdjrUhTM35s-3RMpeo","name":"Solid Green","type":"scale","hex":"#34BB55"}],"geom":"monotoneX","height":4,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Source of Stream","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"example_bucket\")\n  |> range(start: -15m)\n  |> filter(fn: (r) => r._measurement == \"heart_rate\")\n  |> filter(fn: (r) => r._field == \"smoothed\" or r._field == \"original_time\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> window(every: 2s) \n  |> map(fn: (r) => ({\n      _time: time(v: r.original_time),  \n      smoothed: r.smoothed\n  }))"}],"shade":true,"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":4,"widthRatio":1,"xCol":"_time","yCol":"smoothed","yPos":8},{"colors":[{"id":"base","name":"laser","type":"text","hex":"#00C9FF"}],"decimalPlaces":2,"height":4,"kind":"Single_Stat","name":"Name this Cell","queries":[{"query":"latest_date_query = from(bucket: \"example_bucket\")\n  |> range(start: -3650d)  // Sufficiently long range to ensure all data is included\n  |> filter(fn: (r) => r._measurement == \"heart_rate\" and r._field == \"original_time\")\n  |> last()  // Gets the last point which should have the latest original_time\n  |> keep(columns: [\"_value\"])\n  |> yield(name: \"latest\")"}],"staticLegend":{},"width":4,"yPos":12}],"name":"Stream"}}]